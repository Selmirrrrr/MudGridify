@using Selmir.MudGridify.Models
@using Microsoft.Extensions.Localization
@using MudBlazor
@inject IStringLocalizer<Resources.Localization> L

@*
    UX IMPROVEMENT: Changed from Elevation="0" to Elevation="1" for subtle depth
    Added soft border for better definition without being heavy
*@
<MudPaper Class="pa-4 pa-sm-5" Elevation="1" Style="border: 1px solid var(--mud-palette-divider);">
    <MudStack Spacing="4">
        @*
            UX IMPROVEMENT: Enhanced header with clearer visual hierarchy
            - Title now has subtitle for context
            - Actions grouped with better spacing and order
        *@
        <MudStack Spacing="2">
            <div class="d-flex justify-space-between align-center flex-wrap" style="gap: 12px;">
                <div>
                    <MudText Typo="Typo.h6" Class="mb-1">@L["FilterBuilder_Title"]</MudText>
                    @* UX IMPROVEMENT: Added subtitle for context and guidance *@
                    <MudText Typo="Typo.body2" Color="Color.Tertiary">
                        @if (Conditions.Any())
                        {
                            @L["FilterBuilder_ActiveFilters"].ToString().Replace("{0}", Conditions.Count.ToString())
                        }
                        else
                        {
                            @L["FilterBuilder_NoFiltersDescription"]
                        }
                    </MudText>
                </div>

                @* UX IMPROVEMENT: Action buttons with clearer hierarchy and grouping *@
                <div class="d-flex align-center flex-wrap" style="gap: 8px;">
                    <MudButton StartIcon="@Icons.Material.Filled.Add"
                               Color="Color.Primary"
                               Variant="Variant.Filled"
                               Size="Size.Medium"
                               OnClick="AddCondition"
                               Disabled="@(!FilterableProperties.Any())"
                               aria-label="@L["FilterBuilder_AddFilter"]">
                        <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">@L["FilterBuilder_AddFilterShort"]</MudHidden>
                        <MudHidden Breakpoint="Breakpoint.SmAndDown">@L["FilterBuilder_AddFilter"]</MudHidden>
                    </MudButton>

                    @* UX IMPROVEMENT: Clear button now uses Text variant for secondary action hierarchy *@
                    @if (Conditions.Any())
                    {
                        <MudButton StartIcon="@Icons.Material.Filled.Clear"
                                   Color="Color.Default"
                                   Variant="Variant.Text"
                                   Size="Size.Medium"
                                   OnClick="ClearAll"
                                   aria-label="@L["FilterBuilder_ClearAll"]">
                            <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">@L["FilterBuilder_ClearAllShort"]</MudHidden>
                            <MudHidden Breakpoint="Breakpoint.SmAndDown">@L["FilterBuilder_ClearAll"]</MudHidden>
                        </MudButton>
                    }
                </div>
            </div>

            @*
                UX IMPROVEMENT: Completely redesigned logical operator toggle
                - Now a prominent, centered chip-style selector
                - Uses clearer icons and colors
                - Only shows when relevant (2+ conditions)
                - Better mobile experience
            *@
            @if (Conditions.Count > 1)
            {
                <MudPaper Class="pa-3" Outlined="true" Style="background-color: var(--mud-palette-background-grey);">
                    <div class="d-flex align-center justify-space-between flex-wrap" style="gap: 12px;">
                        <MudText Typo="Typo.body2" Color="Color.Tertiary">
                            <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Small" Class="mr-1" Style="vertical-align: middle;" />
                            @L["FilterBuilder_LogicalOperatorDescription"]
                        </MudText>

                        @* UX IMPROVEMENT: Segmented button-style toggle instead of icon button *@
                        <MudButtonGroup Variant="Variant.Outlined" Size="Size.Small" aria-label="@L["FilterBuilder_LogicalOperatorLabel"]">
                            <MudButton OnClick="@(() => OnLogicalOperatorChanged(false))"
                                       Color="@(!IsOrOperator ? Color.Primary : Color.Default)"
                                       Variant="@(!IsOrOperator ? Variant.Filled : Variant.Outlined)"
                                       StartIcon="@Icons.Material.Filled.FilterList"
                                       aria-pressed="@(!IsOrOperator)"
                                       aria-label="@L["FilterBuilder_LogicalAndTooltip"]">
                                @L["FilterBuilder_LogicalAnd"]
                            </MudButton>
                            <MudButton OnClick="@(() => OnLogicalOperatorChanged(true))"
                                       Color="@(IsOrOperator ? Color.Secondary : Color.Default)"
                                       Variant="@(IsOrOperator ? Variant.Filled : Variant.Outlined)"
                                       StartIcon="@Icons.Material.Filled.AltRoute"
                                       aria-pressed="@IsOrOperator"
                                       aria-label="@L["FilterBuilder_LogicalOrTooltip"]">
                                @L["FilterBuilder_LogicalOr"]
                            </MudButton>
                        </MudButtonGroup>
                    </div>
                </MudPaper>
            }
        </MudStack>

        @*
            UX IMPROVEMENT: Conditions wrapper with transition container
            Added visual separator between conditions for clarity
        *@
        @if (Conditions.Any())
        {
            <MudStack Spacing="3">
                @for (var i = 0; i < Conditions.Count; i++)
                {
                    var condition = Conditions[i];
                    var index = i;

                    @* UX IMPROVEMENT: Added condition number badge for multi-filter clarity *@
                    <div style="position: relative;">
                        @if (Conditions.Count > 1)
                        {
                            <div style="position: absolute; left: -8px; top: -8px; z-index: 10;">
                                <MudChip T="string" Size="Size.Small" Color="Color.Default" Variant="Variant.Filled" Style="font-weight: 600;">
                                    @(index + 1)
                                </MudChip>
                            </div>
                        }

                        <FilterConditionRow Condition="@condition"
                                            AvailableProperties="@FilterableProperties"
                                            OnConditionChanged="@(() => OnConditionChanged())"
                                            OnRemoveRequested="@(() => RemoveCondition(condition))"
                                            CanRemove="@(Conditions.Count > 0)" />

                        @* UX IMPROVEMENT: Visual AND/OR separator between conditions *@
                        @if (i < Conditions.Count - 1)
                        {
                            <div class="d-flex align-center justify-center my-2">
                                <MudDivider Class="flex-grow-1" />
                                <MudChip T="string"
                                         Size="Size.Small"
                                         Color="@(IsOrOperator ? Color.Secondary : Color.Primary)"
                                         Variant="Variant.Text"
                                         Class="mx-2"
                                         Style="font-weight: 600;">
                                    @(IsOrOperator ? L["FilterBuilder_LogicalOr"] : L["FilterBuilder_LogicalAnd"])
                                </MudChip>
                                <MudDivider Class="flex-grow-1" />
                            </div>
                        }
                    </div>
                }
            </MudStack>
        }

        @*
            UX IMPROVEMENT: Enhanced generated query display
            - Added accent color border for visual prominence
            - Improved copy feedback with snackbar
            - Better visual hierarchy
        *@
        @if (ShowGeneratedQuery && !string.IsNullOrWhiteSpace(GeneratedQuery))
        {
            <MudPaper Class="pa-4"
                      Outlined="true"
                      Style="border: 2px solid var(--mud-palette-primary); background-color: var(--mud-palette-surface);">
                <MudStack Spacing="2">
                    <div class="d-flex justify-space-between align-center">
                        <div class="d-flex align-center" style="gap: 8px;">
                            <MudIcon Icon="@Icons.Material.Filled.Code" Color="Color.Primary" Size="Size.Small" />
                            <MudText Typo="Typo.subtitle1" Style="font-weight: 600;" Color="Color.Primary">
                                @L["FilterBuilder_GeneratedQuery"]
                            </MudText>
                        </div>

                        @* UX IMPROVEMENT: Enhanced copy button with better feedback *@
                        <MudTooltip Text="@CopyButtonTooltip">
                            <MudIconButton Icon="@(IsCopied ? Icons.Material.Filled.Check : Icons.Material.Filled.ContentCopy)"
                                           Size="Size.Small"
                                           Color="@(IsCopied ? Color.Success : Color.Default)"
                                           OnClick="CopyToClipboard"
                                           aria-label="@L["FilterBuilder_CopyToClipboard"]" />
                        </MudTooltip>
                    </div>

                    @* UX IMPROVEMENT: Better query display with syntax highlighting background *@
                    <MudTextField T="string"
                                  Value="@GeneratedQuery"
                                  ReadOnly="true"
                                  Variant="Variant.Filled"
                                  Lines="3"
                                  Class="mud-input-monospace"
                                  aria-label="@L["FilterBuilder_GeneratedQueryField"]" />
                </MudStack>
            </MudPaper>
        }
    </MudStack>
</MudPaper>

@* UX IMPROVEMENT: Added CSS for smooth transitions and better monospace styling *@
<style>
    .mud-input-monospace input,
    .mud-input-monospace textarea {
        font-family: 'Consolas', 'Monaco', 'Courier New', Courier, monospace;
        font-size: 0.875rem;
        line-height: 1.5;
    }

    /* Smooth transitions for dynamic elements */
    .mud-button-group .mud-button {
        transition: all 0.2s ease-in-out;
    }

    /* Enhance chip animations */
    .mud-chip {
        transition: all 0.2s ease-in-out;
    }

    /* Smooth hover states for papers */
    .mud-paper {
        transition: box-shadow 0.2s ease-in-out;
    }
</style>

@code {
    /// <summary>
    /// List of properties that can be filtered
    /// </summary>
    [Parameter]
    public List<FilterableProperty> FilterableProperties { get; set; } = new();

    /// <summary>
    /// Initial conditions to load (optional)
    /// </summary>
    [Parameter]
    public List<FilterCondition> InitialConditions { get; set; } = new();

    /// <summary>
    /// Whether to show the generated Gridify query string
    /// </summary>
    [Parameter]
    public bool ShowGeneratedQuery { get; set; } = true;

    /// <summary>
    /// Event fired when the filter query changes
    /// </summary>
    [Parameter]
    public EventCallback<string> OnFilterChanged { get; set; }

    /// <summary>
    /// The current list of filter conditions
    /// </summary>
    public List<FilterCondition> Conditions { get; private set; } = new();

    /// <summary>
    /// The logical operator between conditions (false = AND, true = OR)
    /// </summary>
    private bool IsOrOperator { get; set; }

    /// <summary>
    /// The generated Gridify query string
    /// </summary>
    public string GeneratedQuery { get; private set; } = string.Empty;

    /// <summary>
    /// UX IMPROVEMENT: Track copy state for visual feedback
    /// </summary>
    private bool IsCopied { get; set; }

    /// <summary>
    /// UX IMPROVEMENT: Dynamic tooltip text for copy button
    /// </summary>
    private string CopyButtonTooltip => IsCopied ? L["FilterBuilder_Copied"] : L["FilterBuilder_CopyToClipboard"];

    [Inject]
    private IJSRuntime JsRuntime { get; set; } = null!;

    [Inject]
    private ISnackbar? Snackbar { get; set; }

    protected override void OnInitialized()
    {
        if (InitialConditions.Any())
        {
            Conditions = new List<FilterCondition>(InitialConditions);
        }
        else if (FilterableProperties.Any())
        {
            // Start with one empty condition
            AddCondition();
        }

        UpdateGeneratedQuery();
    }

    private void AddCondition()
    {
        var newCondition = new FilterCondition();

        // Pre-select the first property if available
        if (FilterableProperties.Any())
        {
            newCondition.Property = FilterableProperties.First();
            var operators = FilterOperatorExtensions.GetOperatorsForType(newCondition.Property.PropertyType);
            newCondition.Operator = operators.FirstOrDefault();

            // Set default value for boolean
            if (newCondition.Property.PropertyType == FilterPropertyType.Boolean)
            {
                newCondition.Value = "true";
            }
        }

        Conditions.Add(newCondition);
        UpdateGeneratedQuery();
    }

    private void RemoveCondition(FilterCondition condition)
    {
        Conditions.Remove(condition);
        UpdateGeneratedQuery();
    }

    private void ClearAll()
    {
        Conditions.Clear();
        UpdateGeneratedQuery();
    }

    private void OnConditionChanged()
    {
        UpdateGeneratedQuery();
    }

    private void OnLogicalOperatorChanged(bool isOr)
    {
        IsOrOperator = isOr;
        UpdateGeneratedQuery();
    }

    private void UpdateGeneratedQuery()
    {
        var validConditions = Conditions
            .Where(c => c.IsValid())
            .Select(c => c.ToGridifyString())
            .Where(s => !string.IsNullOrWhiteSpace(s))
            .ToList();

        if (!validConditions.Any())
        {
            GeneratedQuery = string.Empty;
        }
        else if (validConditions.Count == 1)
        {
            GeneratedQuery = validConditions[0];
        }
        else
        {
            var separator = IsOrOperator ? "|" : ",";
            GeneratedQuery = string.Join(separator, validConditions);
        }

        // Notify parent component
        OnFilterChanged.InvokeAsync(GeneratedQuery);
    }

    /// <summary>
    /// UX IMPROVEMENT: Enhanced copy with visual feedback and timeout
    /// </summary>
    private async Task CopyToClipboard()
    {
        try
        {
            await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", GeneratedQuery);
            IsCopied = true;

            // Show success snackbar
            Snackbar?.Add(L["FilterBuilder_CopySuccess"], Severity.Success);

            // Reset icon after 2 seconds
            await Task.Delay(2000);
            IsCopied = false;
            StateHasChanged();
        }
        catch
        {
            Snackbar?.Add(L["FilterBuilder_CopyError"], Severity.Error);
        }
    }

    /// <summary>
    /// Gets the current Gridify filter query string
    /// </summary>
    public string GetFilterQuery() => GeneratedQuery;

    /// <summary>
    /// Programmatically set conditions
    /// </summary>
    public void SetConditions(List<FilterCondition> conditions)
    {
        Conditions = new List<FilterCondition>(conditions);
        UpdateGeneratedQuery();
        StateHasChanged();
    }

    /// <summary>
    /// Programmatically add a condition
    /// </summary>
    public void AddCondition(FilterCondition condition)
    {
        Conditions.Add(condition);
        UpdateGeneratedQuery();
        StateHasChanged();
    }
}
