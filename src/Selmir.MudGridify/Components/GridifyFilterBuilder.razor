@using Microsoft.Extensions.Localization
@inject IStringLocalizer<Resources.Localization> L

<MudPaper Class="pa-4 pa-sm-5" Elevation="1" Style="border: 1px solid var(--mud-palette-divider);">
    <MudStack Spacing="4">
        <MudStack Spacing="2">
            <div class="d-flex justify-space-between align-center flex-wrap" style="gap: 12px;">
                <div class="d-flex align-center" style="gap: 8px;">
                    <MudTooltip Text="@(IsExpanded ? L["FilterBuilder_Collapse"] : L["FilterBuilder_Expand"])" Placement="Placement.Top">
                        <MudIconButton Icon="@(IsExpanded ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore)"
                                       Color="Color.Default"
                                       Size="Size.Small"
                                       OnClick="@(() => IsExpanded = !IsExpanded)"
                                       aria-label="@(IsExpanded ? L["FilterBuilder_Collapse"] : L["FilterBuilder_Expand"])"
                                       aria-expanded="@IsExpanded" />
                    </MudTooltip>

                    <MudText Typo="Typo.h6" Class="mb-1">@L["FilterBuilder_Title"]</MudText>
                </div>

                <div class="d-flex align-center" style="gap: 4px;">
                    <MudText Typo="Typo.body2" Color="Color.Tertiary">
                        @if (!Conditions.Any())
                        {
                            <span>@L["FilterBuilder_NoFiltersDescription"]</span>
                        }
                    </MudText>

                    <MudButton StartIcon="@Icons.Material.Filled.Add"
                               Color="Color.Primary"
                               Variant="Variant.Filled"
                               Size="Size.Small"
                               OnClick="AddCondition"
                               Disabled="@(!FilterableProperties.Any())"
                               aria-label="@L["FilterBuilder_AddFilter"]">
                        @L["FilterBuilder_AddFilterShort"]
                    </MudButton>

                    @if (Conditions.Any())
                    {
                        <MudButton StartIcon="@Icons.Material.Filled.Clear"
                                   Color="Color.Default"
                                   Variant="Variant.Text"
                                   Size="Size.Small"
                                   OnClick="ClearAll"
                                   aria-label="@L["FilterBuilder_ClearAll"]">
                            @L["FilterBuilder_ClearAllShort"]
                        </MudButton>
                    }
                </div>
            </div>

        </MudStack>

        <MudCollapse Expanded="@IsExpanded">
            @if (Conditions.Any())
            {
                <MudStack Spacing="3">
                    @for (var i = 0; i < Conditions.Count; i++)
                    {
                        var condition = Conditions[i];
                        var index = i;

                        <FilterConditionRow Condition="@condition"
                                            AvailableProperties="@FilterableProperties"
                                            OnConditionChanged="@(() => OnConditionChanged())"
                                            OnRemoveRequested="@(() => RemoveCondition(condition))"
                                            CanRemove="@(Conditions.Count > 0)"
                                            ShowLogicalOperator="@(i < Conditions.Count - 1)" />
                    }
                </MudStack>
            }
        </MudCollapse>
    </MudStack>
</MudPaper>

@code {
    /// <summary>
    /// List of properties that can be filtered
    /// </summary>
    [Parameter]
    public List<FilterableProperty> FilterableProperties { get; set; } = new();

    /// <summary>
    /// Initial conditions to load (optional)
    /// </summary>
    [Parameter]
    public List<FilterCondition> InitialConditions { get; set; } = new();


    /// <summary>
    /// Whether to show the generated Gridify query string
    /// </summary>
    [Parameter]
    public bool ShowGeneratedQuery { get; set; } = true;

    /// <summary>
    /// Event fired when the filter query changes
    /// </summary>
    [Parameter]
    public EventCallback<string> OnFilterChanged { get; set; }

    /// <summary>
    /// The current list of filter conditions
    /// </summary>
    public List<FilterCondition> Conditions { get; private set; } = new();

    /// <summary>
    /// Whether the filter conditions are expanded or collapsed
    /// </summary>
    private bool IsExpanded { get; set; } = true;

    /// <summary>
    /// The generated Gridify query string
    /// </summary>
    public string GeneratedQuery { get; private set; } = string.Empty;

    protected override void OnInitialized()
    {
        if (InitialConditions.Any())
        {
            Conditions = new List<FilterCondition>(InitialConditions);
        }
        else if (FilterableProperties.Any())
        {
            // Start with one empty condition
            AddCondition();
        }

        UpdateGeneratedQuery();
    }

    private void AddCondition()
    {
        var newCondition = new FilterCondition();

        // Pre-select the first property if available
        if (FilterableProperties.Any())
        {
            newCondition.Property = FilterableProperties.First();
            var operators = FilterOperatorExtensions.GetOperatorsForType(newCondition.Property.PropertyType);
            newCondition.Operator = operators.FirstOrDefault();

            // Set default value for boolean
            if (newCondition.Property.PropertyType == FilterPropertyType.Boolean)
            {
                newCondition.Value = "true";
            }
        }

        Conditions.Add(newCondition);
        UpdateGeneratedQuery();
    }

    private void RemoveCondition(FilterCondition condition)
    {
        Conditions.Remove(condition);
        UpdateGeneratedQuery();
    }

    private void ClearAll()
    {
        Conditions.Clear();
        UpdateGeneratedQuery();
    }

    private void OnConditionChanged()
    {
        UpdateGeneratedQuery();
    }

    private void UpdateGeneratedQuery()
    {
        var queryParts = new List<string>();

        for (int i = 0; i < Conditions.Count; i++)
        {
            var condition = Conditions[i];
            if (!condition.IsValid())
                continue;

            var conditionString = condition.ToGridifyString();
            if (string.IsNullOrWhiteSpace(conditionString))
                continue;

            queryParts.Add(conditionString);

            // Add the logical operator if this is not the last valid condition
            if (i < Conditions.Count - 1)
            {
                // Check if there are more valid conditions after this one
                bool hasMoreValidConditions = false;
                for (int j = i + 1; j < Conditions.Count; j++)
                {
                    if (Conditions[j].IsValid())
                    {
                        hasMoreValidConditions = true;
                        break;
                    }
                }

                if (hasMoreValidConditions)
                {
                    // Use the NextLogicalOperator from the current condition
                    queryParts.Add(condition.NextLogicalOperator.ToGridifyOperator());
                }
            }
        }

        GeneratedQuery = string.Join("", queryParts);

        // Notify parent component
        OnFilterChanged.InvokeAsync(GeneratedQuery);
    }

    /// <summary>
    /// Gets the current Gridify filter query string
    /// </summary>
    public string GetFilterQuery() => GeneratedQuery;

    /// <summary>
    /// Programmatically set conditions
    /// </summary>
    public void SetConditions(List<FilterCondition> conditions)
    {
        Conditions = new List<FilterCondition>(conditions);
        UpdateGeneratedQuery();
        StateHasChanged();
    }

    /// <summary>
    /// Programmatically add a condition
    /// </summary>
    public void AddCondition(FilterCondition condition)
    {
        Conditions.Add(condition);
        UpdateGeneratedQuery();
        StateHasChanged();
    }
}
