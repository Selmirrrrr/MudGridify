@using Microsoft.Extensions.Localization
@inject IStringLocalizer<Resources.Localization> L

<MudPaper Class="@GetPaperClass()"
          Elevation="0"
          Style="@GetPaperStyle()"
          @onmouseenter="OnMouseEnter"
          @onmouseleave="OnMouseLeave">
    <MudGrid Spacing="2">
        <MudItem xs="12" sm="12" md="4">
            <MudSelect T="FilterableProperty"
                       Label="@L["FilterCondition_Property"]"
                       Value="Condition.Property"
                       ValueChanged="OnPropertyChanged"
                       Variant="Variant.Outlined"
                       Dense="true"
                       FullWidth="true"
                       aria-label="@L["FilterCondition_PropertyAriaLabel"]">
                @foreach (var prop in AvailableProperties)
                {
                    <MudSelectItem Value="@prop">@prop.DisplayName</MudSelectItem>
                }
            </MudSelect>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudSelect T="Models.FilterOperator"
                       Label="@L["FilterCondition_Operator"]"
                       Value="Condition.Operator"
                       ValueChanged="OnOperatorChanged"
                       Variant="Variant.Outlined"
                       Dense="true"
                       FullWidth="true"
                       Disabled="@(Condition.Property == null)"
                       aria-label="@L["FilterCondition_OperatorAriaLabel"]">
                @if (Condition.Property != null)
                {
                    foreach (var op in FilterOperatorExtensions.GetOperatorsForType(Condition.Property.PropertyType))
                    {
                        <MudSelectItem Value="@op">@op.GetDisplayName(L)</MudSelectItem>
                    }
                }
            </MudSelect>
        </MudItem>

        <MudItem xs="12" sm="6" md="4">
            @if (Condition.Property != null)
            {
                <div style="position: relative;">
                    @switch (Condition.Property.PropertyType)
                    {
                        case FilterPropertyType.String:
                            <MudTextField T="string"
                                          Label="@L["FilterCondition_Value"]"
                                          Value="Condition.Value"
                                          ValueChanged="OnValueChanged"
                                          Variant="Variant.Outlined"
                                          Dense="true"
                                          aria-label="@L["FilterCondition_ValueAriaLabel"]"
                                          Immediate="false" />
                            <div style="position: absolute; right: 8px; top: 50%; transform: translateY(-50%); z-index: 1;">
                                <MudTooltip Text="@L["FilterCondition_CaseInsensitiveTooltip"]" Placement="Placement.Top">
                                    <MudIconButton Icon="@(Condition.CaseInsensitive ? Icons.Material.Filled.TextFields : Icons.Material.Outlined.TextFields)"
                                                   Size="Size.Small"
                                                   Color="@(Condition.CaseInsensitive ? Color.Primary : Color.Default)"
                                                   OnClick="ToggleCaseInsensitive"
                                                   aria-label="@L["FilterCondition_CaseInsensitive"]"
                                                   aria-pressed="@Condition.CaseInsensitive"
                                                   Style="margin-right: 4px;" />
                                </MudTooltip>
                            </div>
                            break;

                        case FilterPropertyType.Number:
                            <MudNumericField T="double?"
                                             Label="@L["FilterCondition_Value"]"
                                             Value="@GetNumericValue()"
                                             ValueChanged="@((double? val) => OnNumericValueChanged(val))"
                                             Variant="Variant.Outlined"
                                             Dense="true"
                                             aria-label="@L["FilterCondition_ValueAriaLabel"]" />
                            break;

                        case FilterPropertyType.Boolean:
                            <MudSelect T="string"
                                       Label="@L["FilterCondition_Value"]"
                                       Value="Condition.Value"
                                       ValueChanged="OnValueChanged"
                                       Variant="Variant.Outlined"
                                       Dense="true"
                                       aria-label="@L["FilterCondition_ValueAriaLabel"]">
                                <MudSelectItem Value="@("true")">
                                    <div class="d-flex align-center" style="gap: 8px;">
                                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Small" Color="Color.Success" />
                                        <span>@(Condition.Property.TrueLabel ?? L["Boolean_True"])</span>
                                    </div>
                                </MudSelectItem>
                                <MudSelectItem Value="@("false")">
                                    <div class="d-flex align-center" style="gap: 8px;">
                                        <MudIcon Icon="@Icons.Material.Filled.Cancel" Size="Size.Small" Color="Color.Error" />
                                        <span>@(Condition.Property.FalseLabel ?? L["Boolean_False"])</span>
                                    </div>
                                </MudSelectItem>
                            </MudSelect>
                            break;

                        case FilterPropertyType.Date:
                            <MudDatePicker Label="@L["FilterCondition_Value"]"
                                           Date="@GetDateValue()"
                                           DateChanged="@((DateTime? date) => OnDateChanged(date))"
                                           Variant="Variant.Outlined"
                                           Dense="true"
                                           aria-label="@L["FilterCondition_ValueAriaLabel"]" />
                            break;

                        case FilterPropertyType.DateTime:
                            <MudDatePicker Label="@L["FilterCondition_Value"]"
                                           Date="@GetDateValue()"
                                           DateChanged="@((DateTime? date) => OnDateTimeChanged(date))"
                                           Variant="Variant.Outlined"
                                           Dense="true"
                                           aria-label="@L["FilterCondition_ValueAriaLabel"]"
                                           Placeholder="@L["FilterCondition_DateTimePlaceholder"]" />
                            break;
                    }
                </div>
            }
            else
            {
                <MudTextField T="string"
                              Label="@L["FilterCondition_Value"]"
                              Disabled="true"
                              Variant="Variant.Outlined"
                              Dense="true"
                              Placeholder="@L["FilterCondition_SelectPropertyFirst"]"
                              aria-label="@L["FilterCondition_ValueAriaLabel"]" />
            }
        </MudItem>

        <MudItem xs="1" sm="1" md="1" Class="d-flex align-center justify-center">
            <MudTooltip Text="@L["FilterCondition_RemoveTooltip"]" Placement="Placement.Top">
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Color="Color.Error"
                               Size="Size.Small"
                               OnClick="OnRemove"
                               Disabled="@(!CanRemove)"
                               aria-label="@L["FilterCondition_Remove"]" />
            </MudTooltip>
        </MudItem>
    </MudGrid>
</MudPaper>


@code {
    [Parameter]
    public FilterCondition Condition { get; set; } = new();

    [Parameter]
    public List<FilterableProperty> AvailableProperties { get; set; } = new();

    [Parameter]
    public EventCallback OnConditionChanged { get; set; }

    [Parameter]
    public EventCallback OnRemoveRequested { get; set; }

    [Parameter]
    public bool CanRemove { get; set; } = true;

    private bool IsHovering { get; set; }

    private string GetPaperClass()
    {
        return IsHovering ? "filter-row-paper is-hovering pa-2" : "filter-row-paper pa-2";
    }

    private string GetPaperStyle()
    {
        return "margin-bottom: 8px;";
    }

    private void OnMouseEnter()
    {
        IsHovering = true;
    }

    private void OnMouseLeave()
    {
        IsHovering = false;
    }

    private double? GetNumericValue()
    {
        if (double.TryParse(Condition.Value, out var result))
            return result;
        return null;
    }

    private DateTime? GetDateValue()
    {
        if (DateTime.TryParse(Condition.Value, out var result))
            return result;
        return null;
    }

    private async Task OnPropertyChanged(FilterableProperty property)
    {
        Condition.Property = property;

        if (property != null)
        {
            var operators = FilterOperatorExtensions.GetOperatorsForType(property.PropertyType);
            Condition.Operator = operators.FirstOrDefault();
        }

        // Reset value
        Condition.Value = property?.PropertyType == FilterPropertyType.Boolean ? "true" : string.Empty;
        Condition.CaseInsensitive = false;

        await OnConditionChanged.InvokeAsync();
    }

    private async Task OnOperatorChanged(Models.FilterOperator op)
    {
        Condition.Operator = op;
        await OnConditionChanged.InvokeAsync();
    }

    private async Task OnValueChanged(string? value)
    {
        Condition.Value = value;
        await OnConditionChanged.InvokeAsync();
    }

    private async Task OnNumericValueChanged(double? value)
    {
        Condition.Value = value?.ToString();
        await OnConditionChanged.InvokeAsync();
    }

    private async Task OnDateChanged(DateTime? date)
    {
        Condition.Value = date?.ToString("yyyy-MM-dd");
        await OnConditionChanged.InvokeAsync();
    }

    private async Task OnDateTimeChanged(DateTime? date)
    {
        Condition.Value = date?.ToString("yyyy-MM-ddTHH:mm:ss");
        await OnConditionChanged.InvokeAsync();
    }

    private async Task ToggleCaseInsensitive()
    {
        Condition.CaseInsensitive = !Condition.CaseInsensitive;
        await OnConditionChanged.InvokeAsync();
    }

    private async Task OnRemove()
    {
        await OnRemoveRequested.InvokeAsync();
    }
}
