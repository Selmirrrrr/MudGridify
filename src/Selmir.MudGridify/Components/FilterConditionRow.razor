@using Selmir.MudGridify.Models

<MudPaper Class="pa-3 mb-2" Elevation="2">
    <MudGrid Spacing="2">
        @* Property Selection *@
        <MudItem xs="12" sm="12" md="3" lg="3">
            <MudSelect T="FilterableProperty"
                       Label="@L["FilterCondition_Property"]"
                       Value="Condition.Property"
                       ValueChanged="OnPropertyChanged"
                       Variant="Variant.Outlined"
                       Dense="true"
                       FullWidth="true">
                @foreach (var prop in AvailableProperties)
                {
                    <MudSelectItem Value="@prop">@prop.DisplayName</MudSelectItem>
                }
            </MudSelect>
        </MudItem>

        @* Operator Selection *@
        <MudItem xs="12" sm="6" md="3" lg="2">
            <MudSelect T="Models.FilterOperator"
                       Label="@L["FilterCondition_Operator"]"
                       Value="Condition.Operator"
                       ValueChanged="OnOperatorChanged"
                       Variant="Variant.Outlined"
                       Dense="true"
                       FullWidth="true"
                       Disabled="@(Condition.Property == null)">
                @if (Condition.Property != null)
                {
                    foreach (var op in FilterOperatorExtensions.GetOperatorsForType(Condition.Property.PropertyType))
                    {
                        <MudSelectItem Value="@op">@op.GetDisplayName(L)</MudSelectItem>
                    }
                }
            </MudSelect>
        </MudItem>

        @* Value Input - Dynamic based on property type *@
        <MudItem xs="12" sm="6" md="4" lg="5">
            @if (Condition.Property != null)
            {
                switch (Condition.Property.PropertyType)
                {
                    case FilterPropertyType.String:
                        <MudTextField T="string"
                                      Label="@L["FilterCondition_Value"]"
                                      Value="Condition.Value"
                                      ValueChanged="OnValueChanged"
                                      Variant="Variant.Outlined"
                                      Dense="true" />
                        break;

                    case FilterPropertyType.Number:
                        <MudNumericField T="double?"
                                         Label="@L["FilterCondition_Value"]"
                                         Value="@GetNumericValue()"
                                         ValueChanged="@((double? val) => OnNumericValueChanged(val))"
                                         Variant="Variant.Outlined"
                                         Dense="true" />
                        break;

                    case FilterPropertyType.Boolean:
                        <MudSelect T="string"
                                   Label="@L["FilterCondition_Value"]"
                                   Value="Condition.Value"
                                   ValueChanged="OnValueChanged"
                                   Variant="Variant.Outlined"
                                   Dense="true">
                            <MudSelectItem Value="@("true")">@(Condition.Property.TrueLabel ?? L["Boolean_True"])</MudSelectItem>
                            <MudSelectItem Value="@("false")">@(Condition.Property.FalseLabel ?? L["Boolean_False"])</MudSelectItem>
                        </MudSelect>
                        break;

                    case FilterPropertyType.Date:
                        <MudDatePicker Label="@L["FilterCondition_Value"]"
                                       Date="@GetDateValue()"
                                       DateChanged="@((DateTime? date) => OnDateChanged(date))"
                                       Variant="Variant.Outlined"
                                       Dense="true" />
                        break;

                    case FilterPropertyType.DateTime:
                        <MudDatePicker Label="@L["FilterCondition_Value"]"
                                       Date="@GetDateValue()"
                                       DateChanged="@((DateTime? date) => OnDateTimeChanged(date))"
                                       Variant="Variant.Outlined"
                                       Dense="true" />
                        break;
                }
            }
            else
            {
                <MudTextField T="string"
                              Label="@L["FilterCondition_Value"]"
                              Disabled="true"
                              Variant="Variant.Outlined"
                              Dense="true" />
            }
        </MudItem>

        @* Actions: Case Insensitive Toggle & Remove Button *@
        <MudItem xs="12" sm="12" md="2" lg="2" Class="d-flex align-center justify-space-between">
            <div class="d-flex align-center">
                @if (Condition.Property?.PropertyType == FilterPropertyType.String)
                {
                    <MudTooltip Text="@L["FilterCondition_CaseInsensitiveTooltip"]">
                        <MudCheckBox T="bool"
                                     Value="Condition.CaseInsensitive"
                                     ValueChanged="OnCaseInsensitiveChanged"
                                     Color="Color.Primary"
                                     Dense="true"
                                     Label="@L["FilterCondition_CaseInsensitive"]" />
                    </MudTooltip>
                }
            </div>
            <div class="d-flex align-center">
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Color="Color.Error"
                               OnClick="OnRemove"
                               Size="Size.Medium"
                               Edge="Edge.End" />
            </div>
        </MudItem>
    </MudGrid>
</MudPaper>

@using Microsoft.Extensions.Localization
@inject IStringLocalizer<Resources.Localization> L

@code {
    [Parameter]
    public FilterCondition Condition { get; set; } = new();

    [Parameter]
    public List<FilterableProperty> AvailableProperties { get; set; } = new();

    [Parameter]
    public EventCallback OnConditionChanged { get; set; }

    [Parameter]
    public EventCallback OnRemoveRequested { get; set; }

    private double? GetNumericValue()
    {
        if (double.TryParse(Condition.Value, out var result))
            return result;
        return null;
    }

    private DateTime? GetDateValue()
    {
        if (DateTime.TryParse(Condition.Value, out var result))
            return result;
        return null;
    }

    private async Task OnPropertyChanged(FilterableProperty property)
    {
        Condition.Property = property;

        // Reset operator to first available for this type
        if (property != null)
        {
            var operators = FilterOperatorExtensions.GetOperatorsForType(property.PropertyType);
            Condition.Operator = operators.FirstOrDefault();
        }

        // Reset value
        Condition.Value = property?.PropertyType == FilterPropertyType.Boolean ? "true" : string.Empty;
        Condition.CaseInsensitive = false;

        await OnConditionChanged.InvokeAsync();
    }

    private async Task OnOperatorChanged(Models.FilterOperator op)
    {
        Condition.Operator = op;
        await OnConditionChanged.InvokeAsync();
    }

    private async Task OnValueChanged(string? value)
    {
        Condition.Value = value;
        await OnConditionChanged.InvokeAsync();
    }

    private async Task OnNumericValueChanged(double? value)
    {
        Condition.Value = value?.ToString();
        await OnConditionChanged.InvokeAsync();
    }

    private async Task OnDateChanged(DateTime? date)
    {
        Condition.Value = date?.ToString("yyyy-MM-dd");
        await OnConditionChanged.InvokeAsync();
    }

    private async Task OnDateTimeChanged(DateTime? date)
    {
        Condition.Value = date?.ToString("yyyy-MM-ddTHH:mm:ss");
        await OnConditionChanged.InvokeAsync();
    }

    private async Task OnCaseInsensitiveChanged(bool value)
    {
        Condition.CaseInsensitive = value;
        await OnConditionChanged.InvokeAsync();
    }

    private async Task OnRemove()
    {
        await OnRemoveRequested.InvokeAsync();
    }
}
