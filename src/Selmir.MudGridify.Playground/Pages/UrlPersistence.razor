@page "/url-persistence"
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@using System.Web
@using Selmir.MudGridify.Utilities

<PageTitle>URL Persistence - MudGridify</PageTitle>

<MudStack Spacing="4">
    <MudPaper Class="pa-4" Elevation="0">
        <MudStack Spacing="2">
            <MudText Typo="Typo.h4">
                <MudIcon Icon="@Icons.Material.Filled.Link" Class="mr-2" />
                URL Persistence Demo
            </MudText>
            <MudText Typo="Typo.body1" Color="Color.Secondary">
                This demo shows how to persist filter state in the browser URL for shareable, bookmarkable filters.
            </MudText>
        </MudStack>
    </MudPaper>

    @* URL Benefits Card *@
    <MudPaper Class="pa-4" Elevation="1">
        <MudStack Spacing="2">
            <MudText Typo="Typo.h6" Color="Color.Primary">
                <MudIcon Icon="@Icons.Material.Filled.Info" Class="mr-2" Size="Size.Small" />
                Benefits of URL Persistence
            </MudText>
            <MudText Typo="Typo.body2">
                <MudIcon Icon="@Icons.Material.Filled.Share" Size="Size.Small" Class="mr-1" Color="Color.Success" />
                <strong>Shareable:</strong> Copy and share the URL with colleagues to show specific filtered views
            </MudText>
            <MudText Typo="Typo.body2">
                <MudIcon Icon="@Icons.Material.Filled.Bookmark" Size="Size.Small" Class="mr-1" Color="Color.Info" />
                <strong>Bookmarkable:</strong> Save frequently used filters as browser bookmarks
            </MudText>
            <MudText Typo="Typo.body2">
                <MudIcon Icon="@Icons.Material.Filled.History" Size="Size.Small" Class="mr-1" Color="Color.Warning" />
                <strong>Browser History:</strong> Use back/forward buttons to navigate through filter states
            </MudText>
            <MudText Typo="Typo.body2">
                <MudIcon Icon="@Icons.Material.Filled.Refresh" Size="Size.Small" Class="mr-1" Color="Color.Secondary" />
                <strong>Page Refresh:</strong> Filters survive page reload - no state lost
            </MudText>
        </MudStack>
    </MudPaper>

    @* Current URL Display *@
    @if (!string.IsNullOrEmpty(_currentFilterQuery))
    {
        <MudPaper Class="pa-4" Elevation="2" Style="background: linear-gradient(135deg, rgba(33, 150, 243, 0.05) 0%, rgba(33, 150, 243, 0.15) 100%);">
            <MudStack Spacing="2">
                <MudText Typo="Typo.subtitle1" Color="Color.Primary">
                    <MudIcon Icon="@Icons.Material.Filled.Link" Class="mr-2" />
                    Current Shareable URL
                </MudText>
                <MudPaper Class="pa-3" Elevation="0" Style="background: white;">
                    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.body2" Style="font-family: monospace; word-break: break-all; flex: 1;">
                            @_shareableUrl
                        </MudText>
                        <MudTooltip Text="Copy URL to clipboard">
                            <MudIconButton Icon="@Icons.Material.Filled.ContentCopy"
                                           Color="Color.Primary"
                                           OnClick="CopyUrlToClipboard"
                                           Size="Size.Small" />
                        </MudTooltip>
                    </MudStack>
                </MudPaper>
                <MudText Typo="Typo.caption" Color="Color.Secondary">
                    Try copying this URL and opening it in a new browser tab or incognito window!
                </MudText>
            </MudStack>
        </MudPaper>
    }

    @* Filter Builder Component *@
    <GridifyFilterBuilder @ref="_filterBuilder"
                          FilterableProperties="@_filterableProperties"
                          InitialConditions="@_initialConditions"
                          ShowGeneratedQuery="true"
                          OnFilterChanged="@OnFilterChanged" />

    @* Results Display *@
    <MudPaper Class="pa-4" Elevation="2">
        <MudStack Spacing="3">
            <MudGrid Spacing="2">
                <MudItem xs="12" sm="8" Class="d-flex align-center">
                    <MudText Typo="Typo.h6">
                        Filtered Results (@_filteredEmployees.Count of @_allEmployees.Count)
                    </MudText>
                </MudItem>
                <MudItem xs="12" sm="4" Class="d-flex align-center justify-sm-end justify-xs-stretch">
                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Info"
                               OnClick="ResetFilters"
                               StartIcon="@Icons.Material.Filled.Refresh"
                               Class="flex-grow-1 flex-sm-grow-0">
                        <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">Reset Filters</MudHidden>
                        <MudHidden Breakpoint="Breakpoint.Xs">Reset</MudHidden>
                    </MudButton>
                </MudItem>
            </MudGrid>

            <MudTable Items="@_filteredEmployees"
                      Dense="true"
                      Hover="true"
                      Striped="true"
                      Loading="@_loading"
                      Breakpoint="Breakpoint.Sm"
                      HorizontalScrollbar="true">
                <HeaderContent>
                    <MudTh>ID</MudTh>
                    <MudTh>First Name</MudTh>
                    <MudTh>Last Name</MudTh>
                    <MudTh>Email</MudTh>
                    <MudTh>Department</MudTh>
                    <MudTh>Salary</MudTh>
                    <MudTh>Age</MudTh>
                    <MudTh>Hire Date</MudTh>
                    <MudTh>Status</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="ID">@context.Id</MudTd>
                    <MudTd DataLabel="First Name">@context.FirstName</MudTd>
                    <MudTd DataLabel="Last Name">@context.LastName</MudTd>
                    <MudTd DataLabel="Email">@context.Email</MudTd>
                    <MudTd DataLabel="Department">@context.Department</MudTd>
                    <MudTd DataLabel="Salary">$@context.Salary.ToString("N0")</MudTd>
                    <MudTd DataLabel="Age">@context.Age</MudTd>
                    <MudTd DataLabel="Hire Date">@context.HireDate.ToString("MMM dd, yyyy")</MudTd>
                    <MudTd DataLabel="Status">
                        <MudChip T="string" Size="Size.Small"
                                 Color="@(context.IsActive ? Color.Success : Color.Default)">
                            @(context.IsActive ? "Active" : "Inactive")
                        </MudChip>
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText Typo="Typo.body2" Color="Color.Secondary">No employees match the current filters.</MudText>
                </NoRecordsContent>
            </MudTable>
        </MudStack>
    </MudPaper>

    @* Implementation Notes *@
    <MudPaper Class="pa-4" Elevation="1">
        <MudStack Spacing="2">
            <MudText Typo="Typo.h6" Color="Color.Primary">
                <MudIcon Icon="@Icons.Material.Filled.Code" Class="mr-2" Size="Size.Small" />
                Implementation Notes
            </MudText>
            <MudText Typo="Typo.body2">
                This page demonstrates the <strong>application developer responsibility pattern</strong> for URL persistence:
            </MudText>
            <MudList T="string" Dense="true">
                <MudListItem T="string" Icon="@Icons.Material.Filled.ArrowRight">
                    <MudText Typo="Typo.body2">Uses <code>GridifyQueryParser.Parse()</code> to read URL params on page load</MudText>
                </MudListItem>
                <MudListItem T="string" Icon="@Icons.Material.Filled.ArrowRight">
                    <MudText Typo="Typo.body2">Passes parsed conditions to <code>InitialConditions</code> parameter</MudText>
                </MudListItem>
                <MudListItem T="string" Icon="@Icons.Material.Filled.ArrowRight">
                    <MudText Typo="Typo.body2">Updates URL via <code>NavigationManager</code> when filters change (without reload)</MudText>
                </MudListItem>
                <MudListItem T="string" Icon="@Icons.Material.Filled.ArrowRight">
                    <MudText Typo="Typo.body2">Component remains pure - no NavigationManager dependency</MudText>
                </MudListItem>
            </MudList>
            <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mt-2">
                See the README.md for complete code example and integration guide.
            </MudText>
        </MudStack>
    </MudPaper>
</MudStack>

@code {
    private GridifyFilterBuilder? _filterBuilder;
    private List<FilterableProperty> _filterableProperties = new();
    private List<FilterCondition> _initialConditions = new();
    private List<Employee> _allEmployees = new();
    private List<Employee> _filteredEmployees = new();
    private bool _loading = false;
    private string _currentFilterQuery = string.Empty;
    private string _shareableUrl = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Define filterable properties
        _filterableProperties = new List<FilterableProperty>
        {
            new("FirstName", "First Name", FilterPropertyType.String),
            new("LastName", "Last Name", FilterPropertyType.String),
            new("Email", "Email", FilterPropertyType.String),
            new("Department", "Department", FilterPropertyType.String),
            new("Salary", "Salary", FilterPropertyType.Number),
            new("Age", "Age", FilterPropertyType.Number),
            new("HireDate", "Hire Date", FilterPropertyType.Date),
            new("IsActive", "Active", FilterPropertyType.Boolean)
        };

        // Generate sample data
        _allEmployees = GenerateSampleEmployees();
        _filteredEmployees = new List<Employee>(_allEmployees);

        // Parse URL parameters to restore filter state
        await LoadFiltersFromUrl();
    }

    private async Task LoadFiltersFromUrl()
    {
        try
        {
            var uri = new Uri(Navigation.Uri);
            var queryString = HttpUtility.ParseQueryString(uri.Query);
            var filterParam = queryString["filter"];
            var logicParam = queryString["logic"];

            if (!string.IsNullOrEmpty(filterParam))
            {
                // Parse the Gridify query string back into FilterConditions
                var (conditions, isOrOperator) = GridifyQueryParser.Parse(filterParam, _filterableProperties);

                if (conditions.Any())
                {
                    _initialConditions = conditions;
                    _currentFilterQuery = filterParam;
                    _shareableUrl = Navigation.Uri;

                    // Apply the filter to data immediately
                    var query = _allEmployees.AsQueryable();
                    _filteredEmployees = query.ApplyFiltering(filterParam).ToList();
                }
            }
        }
        catch (Exception ex)
        {
            // If parsing fails, just start with empty filters
            Console.WriteLine($"Error parsing URL filters: {ex.Message}");
        }

        await Task.CompletedTask;
    }

    private async Task OnFilterChanged(string filterQuery)
    {
        _loading = true;
        _currentFilterQuery = filterQuery;

        // Update URL with new filter query (without page reload)
        UpdateUrlWithFilter(filterQuery);

        await Task.Delay(100); // Simulate processing

        if (string.IsNullOrWhiteSpace(filterQuery))
        {
            _filteredEmployees = new List<Employee>(_allEmployees);
        }
        else
        {
            // Apply Gridify filter
            var query = _allEmployees.AsQueryable();
            _filteredEmployees = query.ApplyFiltering(filterQuery).ToList();
        }

        _loading = false;
    }

    private void UpdateUrlWithFilter(string filterQuery)
    {
        var uri = new Uri(Navigation.Uri);
        var baseUrl = $"{uri.Scheme}://{uri.Authority}{uri.AbsolutePath}";

        if (string.IsNullOrWhiteSpace(filterQuery))
        {
            // No filters - clear query parameters
            _shareableUrl = baseUrl;
            Navigation.NavigateTo(baseUrl, forceLoad: false, replace: true);
        }
        else
        {
            // Add filter as query parameter
            var encodedFilter = Uri.EscapeDataString(filterQuery);
            var newUrl = $"{baseUrl}?filter={encodedFilter}";
            _shareableUrl = newUrl;
            Navigation.NavigateTo(newUrl, forceLoad: false, replace: true);
        }
    }

    private async Task CopyUrlToClipboard()
    {
        try
        {
            // Use JavaScript interop to copy to clipboard
            // Note: In a production app, you'd inject IJSRuntime and use it here
            // For this demo, we'll just show a snackbar
            Snackbar.Add("URL copied to clipboard! (Simulated)", Severity.Success);
            await Task.CompletedTask;
        }
        catch (Exception)
        {
            Snackbar.Add("Failed to copy URL", Severity.Error);
        }
    }

    private void ResetFilters()
    {
        _currentFilterQuery = string.Empty;
        _shareableUrl = string.Empty;
        _filteredEmployees = new List<Employee>(_allEmployees);
        UpdateUrlWithFilter(string.Empty);
        StateHasChanged();
    }

    private List<Employee> GenerateSampleEmployees()
    {
        var departments = new[] { "Engineering", "Sales", "Marketing", "HR", "Finance", "Operations" };
        var firstNames = new[] { "John", "Jane", "Michael", "Sarah", "David", "Emily", "Robert", "Lisa", "William", "Jennifer" };
        var lastNames = new[] { "Smith", "Johnson", "Williams", "Brown", "Jones", "Garcia", "Miller", "Davis", "Rodriguez", "Martinez" };

        var employees = new List<Employee>();
        var random = new Random(42); // Fixed seed for consistent data

        for (int i = 1; i <= 50; i++)
        {
            var firstName = firstNames[random.Next(firstNames.Length)];
            var lastName = lastNames[random.Next(lastNames.Length)];

            employees.Add(new Employee
            {
                Id = i,
                FirstName = firstName,
                LastName = lastName,
                Email = $"{firstName.ToLower()}.{lastName.ToLower()}@company.com",
                Department = departments[random.Next(departments.Length)],
                Salary = random.Next(40000, 150000),
                Age = random.Next(22, 65),
                HireDate = DateTime.Now.AddDays(-random.Next(30, 3650)),
                IsActive = random.Next(100) > 10 // 90% active
            });
        }

        return employees.OrderBy(e => e.LastName).ThenBy(e => e.FirstName).ToList();
    }
}
