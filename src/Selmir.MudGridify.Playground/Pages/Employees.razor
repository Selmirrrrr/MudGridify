@page "/employees"

<PageTitle>Employee Filter - MudGridify</PageTitle>

<MudStack Spacing="4">
    <MudPaper Class="pa-4" Elevation="0">
        <MudStack Spacing="2">
            <MudText Typo="Typo.h4">
                <MudIcon Icon="@Icons.Material.Filled.People" Class="mr-2" />
                Employee Filter Demo
            </MudText>
            <MudText Typo="Typo.body1" Color="Color.Secondary">
                Filter employees by various properties including name, department, salary, hire date, and status.
            </MudText>
        </MudStack>
    </MudPaper>

    @* Filter Builder Component *@
    <GridifyFilterBuilder @ref="_filterBuilder"
                          FilterableProperties="@_filterableProperties"
                          ShowGeneratedQuery="true"
                          OnFilterChanged="@OnFilterChanged" />

    @* Results Display *@
    <MudPaper Class="pa-4" Elevation="2">
        <MudStack Spacing="3">
            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                <MudText Typo="Typo.h6">
                    Filtered Results (@_filteredEmployees.Count of @_allEmployees.Count)
                </MudText>
                <MudButton Variant="Variant.Outlined"
                           Color="Color.Info"
                           OnClick="ResetFilters"
                           StartIcon="@Icons.Material.Filled.Refresh">
                    Reset Filters
                </MudButton>
            </MudStack>

            <MudTable Items="@_filteredEmployees"
                      Dense="true"
                      Hover="true"
                      Striped="true"
                      Loading="@_loading">
                <HeaderContent>
                    <MudTh>ID</MudTh>
                    <MudTh>First Name</MudTh>
                    <MudTh>Last Name</MudTh>
                    <MudTh>Email</MudTh>
                    <MudTh>Department</MudTh>
                    <MudTh>Salary</MudTh>
                    <MudTh>Age</MudTh>
                    <MudTh>Hire Date</MudTh>
                    <MudTh>Status</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="ID">@context.Id</MudTd>
                    <MudTd DataLabel="First Name">@context.FirstName</MudTd>
                    <MudTd DataLabel="Last Name">@context.LastName</MudTd>
                    <MudTd DataLabel="Email">@context.Email</MudTd>
                    <MudTd DataLabel="Department">@context.Department</MudTd>
                    <MudTd DataLabel="Salary">$@context.Salary.ToString("N0")</MudTd>
                    <MudTd DataLabel="Age">@context.Age</MudTd>
                    <MudTd DataLabel="Hire Date">@context.HireDate.ToString("MMM dd, yyyy")</MudTd>
                    <MudTd DataLabel="Status">
                        <MudChip T="string" Size="Size.Small"
                                 Color="@(context.IsActive ? Color.Success : Color.Default)">
                            @(context.IsActive ? "Active" : "Inactive")
                        </MudChip>
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText Typo="Typo.body2" Color="Color.Secondary">No employees match the current filters.</MudText>
                </NoRecordsContent>
            </MudTable>
        </MudStack>
    </MudPaper>
</MudStack>

@code {
    private GridifyFilterBuilder? _filterBuilder;
    private List<FilterableProperty> _filterableProperties = new();
    private List<Employee> _allEmployees = new();
    private List<Employee> _filteredEmployees = new();
    private bool _loading = false;

    protected override void OnInitialized()
    {
        // Define filterable properties
        _filterableProperties = new List<FilterableProperty>
        {
            new("FirstName", "First Name", FilterPropertyType.String),
            new("LastName", "Last Name", FilterPropertyType.String),
            new("Email", "Email", FilterPropertyType.String),
            new("Department", "Department", FilterPropertyType.String),
            new("Salary", "Salary", FilterPropertyType.Number),
            new("Age", "Age", FilterPropertyType.Number),
            new("HireDate", "Hire Date", FilterPropertyType.Date),
            new("IsActive", "Active", FilterPropertyType.Boolean)
        };

        // Generate sample data
        _allEmployees = GenerateSampleEmployees();
        _filteredEmployees = new List<Employee>(_allEmployees);
    }

    private async Task OnFilterChanged(string filterQuery)
    {
        _loading = true;
        await Task.Delay(100); // Simulate processing

        if (string.IsNullOrWhiteSpace(filterQuery))
        {
            _filteredEmployees = new List<Employee>(_allEmployees);
        }
        else
        {
            // Apply Gridify filter
            var query = _allEmployees.AsQueryable();
            _filteredEmployees = query.ApplyFiltering(filterQuery).ToList();
        }

        _loading = false;
    }

    private void ResetFilters()
    {
        _filteredEmployees = new List<Employee>(_allEmployees);
        StateHasChanged();
    }

    private List<Employee> GenerateSampleEmployees()
    {
        var departments = new[] { "Engineering", "Sales", "Marketing", "HR", "Finance", "Operations" };
        var firstNames = new[] { "John", "Jane", "Michael", "Sarah", "David", "Emily", "Robert", "Lisa", "William", "Jennifer" };
        var lastNames = new[] { "Smith", "Johnson", "Williams", "Brown", "Jones", "Garcia", "Miller", "Davis", "Rodriguez", "Martinez" };

        var employees = new List<Employee>();
        var random = new Random(42); // Fixed seed for consistent data

        for (int i = 1; i <= 50; i++)
        {
            var firstName = firstNames[random.Next(firstNames.Length)];
            var lastName = lastNames[random.Next(lastNames.Length)];

            employees.Add(new Employee
            {
                Id = i,
                FirstName = firstName,
                LastName = lastName,
                Email = $"{firstName.ToLower()}.{lastName.ToLower()}@company.com",
                Department = departments[random.Next(departments.Length)],
                Salary = random.Next(40000, 150000),
                Age = random.Next(22, 65),
                HireDate = DateTime.Now.AddDays(-random.Next(30, 3650)),
                IsActive = random.Next(100) > 10 // 90% active
            });
        }

        return employees.OrderBy(e => e.LastName).ThenBy(e => e.FirstName).ToList();
    }
}
