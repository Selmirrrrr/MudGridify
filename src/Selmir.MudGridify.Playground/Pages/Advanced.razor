@page "/advanced"

<PageTitle>Advanced Demo - MudGridify</PageTitle>

<MudStack Spacing="4">
    <MudPaper Class="pa-4" Elevation="0">
        <MudStack Spacing="2">
            <MudText Typo="Typo.h4">
                <MudIcon Icon="@Icons.Material.Filled.Science" Class="mr-2" />
                Advanced Filter Demo
            </MudText>
            <MudText Typo="Typo.body1" Color="Color.Secondary">
                Demonstrates advanced filtering with complex queries, multiple conditions, and programmatic control.
            </MudText>
        </MudStack>
    </MudPaper>

    @* Quick Filter Presets *@
    <MudPaper Class="pa-4" Elevation="2">
        <MudStack Spacing="3">
            <MudText Typo="Typo.h6" Color="Color.Primary">
                <MudIcon Icon="@Icons.Material.Filled.Bolt" Class="mr-2" />
                Quick Filter Presets
            </MudText>
            <MudText Typo="Typo.body2">Click a preset to quickly apply common filter combinations:</MudText>
            <MudGrid Spacing="2">
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(() => ApplyPreset("HighEarners"))" FullWidth="true">
                        <MudHidden Breakpoint="Breakpoint.Md" Invert="true">High Earners (Salary &gt; $100k)</MudHidden>
                        <MudHidden Breakpoint="Breakpoint.Md">High Earners</MudHidden>
                    </MudButton>
                </MudItem>
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="@(() => ApplyPreset("RecentHires"))" FullWidth="true">
                        <MudHidden Breakpoint="Breakpoint.Md" Invert="true">Recent Hires (Last Year)</MudHidden>
                        <MudHidden Breakpoint="Breakpoint.Md">Recent Hires</MudHidden>
                    </MudButton>
                </MudItem>
                <MudItem xs="12" sm="6" md="4" lg="2">
                    <MudButton Variant="Variant.Outlined" Color="Color.Tertiary" OnClick="@(() => ApplyPreset("Engineering"))" FullWidth="true">
                        Engineering
                    </MudButton>
                </MudItem>
                <MudItem xs="12" sm="6" md="4" lg="2">
                    <MudButton Variant="Variant.Outlined" Color="Color.Info" OnClick="@(() => ApplyPreset("InactiveOld"))" FullWidth="true">
                        <MudHidden Breakpoint="Breakpoint.Md" Invert="true">Inactive OR Age &gt; 60</MudHidden>
                        <MudHidden Breakpoint="Breakpoint.Md">Inactive/Old</MudHidden>
                    </MudButton>
                </MudItem>
                <MudItem xs="12" sm="6" md="4" lg="1">
                    <MudButton Variant="Variant.Outlined" Color="Color.Warning" OnClick="@(() => ApplyPreset("Complex"))" FullWidth="true">
                        Complex
                    </MudButton>
                </MudItem>
                <MudItem xs="12" sm="6" md="4" lg="1">
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="ClearPreset" FullWidth="true">
                        Clear
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudStack>
    </MudPaper>

    @* Filter Builder Component *@
    <GridifyFilterBuilder @ref="_filterBuilder"
                          FilterableProperties="@_filterableProperties"
                          ShowGeneratedQuery="true"
                          OnFilterChanged="@OnFilterChanged" />

    @* Query Stats *@
    <MudGrid>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4" Elevation="2">
                <MudStack Spacing="1">
                    <MudText Typo="Typo.caption" Color="Color.Secondary">Total Records</MudText>
                    <MudText Typo="Typo.h5">@_allEmployees.Count</MudText>
                </MudStack>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4" Elevation="2">
                <MudStack Spacing="1">
                    <MudText Typo="Typo.caption" Color="Color.Secondary">Filtered Records</MudText>
                    <MudText Typo="Typo.h5" Color="Color.Primary">@_filteredEmployees.Count</MudText>
                </MudStack>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4" Elevation="2">
                <MudStack Spacing="1">
                    <MudText Typo="Typo.caption" Color="Color.Secondary">Filter Efficiency</MudText>
                    <MudText Typo="Typo.h5" Color="Color.Info">@GetFilterPercentage()%</MudText>
                </MudStack>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="pa-4" Elevation="2">
                <MudStack Spacing="1">
                    <MudText Typo="Typo.caption" Color="Color.Secondary">Active Conditions</MudText>
                    <MudText Typo="Typo.h5" Color="Color.Success">@(_filterBuilder?.Conditions.Count(c => c.IsValid()) ?? 0)</MudText>
                </MudStack>
            </MudPaper>
        </MudItem>
    </MudGrid>

    @* Results Display *@
    <MudPaper Class="pa-4" Elevation="2">
        <MudStack Spacing="3">
            <MudText Typo="Typo.h6">Filtered Results</MudText>

            <MudTable Items="@_filteredEmployees"
                      Dense="true"
                      Hover="true"
                      Striped="true"
                      Loading="@_loading"
                      FixedHeader="true"
                      Height="500px"
                      Breakpoint="Breakpoint.Sm"
                      HorizontalScrollbar="true">
                <HeaderContent>
                    <MudTh>ID</MudTh>
                    <MudTh>Name</MudTh>
                    <MudTh>Email</MudTh>
                    <MudTh>Department</MudTh>
                    <MudTh>Salary</MudTh>
                    <MudTh>Age</MudTh>
                    <MudTh>Hire Date</MudTh>
                    <MudTh>Status</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="ID">@context.Id</MudTd>
                    <MudTd DataLabel="Name">@context.FirstName @context.LastName</MudTd>
                    <MudTd DataLabel="Email">@context.Email</MudTd>
                    <MudTd DataLabel="Department">
                        <MudChip T="string" Size="Size.Small">@context.Department</MudChip>
                    </MudTd>
                    <MudTd DataLabel="Salary">$@context.Salary.ToString("N0")</MudTd>
                    <MudTd DataLabel="Age">@context.Age</MudTd>
                    <MudTd DataLabel="Hire Date">@context.HireDate.ToString("MMM dd, yyyy")</MudTd>
                    <MudTd DataLabel="Status">
                        <MudChip T="string" Size="Size.Small"
                                 Color="@(context.IsActive ? Color.Success : Color.Default)">
                            @(context.IsActive ? "Active" : "Inactive")
                        </MudChip>
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText Typo="Typo.body2" Color="Color.Secondary">No employees match the current filters.</MudText>
                </NoRecordsContent>
            </MudTable>
        </MudStack>
    </MudPaper>

    @* Usage Example *@
    <MudPaper Class="pa-4" Elevation="2">
        <MudStack Spacing="2">
            <MudText Typo="Typo.h6" Color="Color.Primary">
                <MudIcon Icon="@Icons.Material.Filled.Code" Class="mr-2" />
                Component Usage Example
            </MudText>
            <MudText Typo="Typo.body2">Here's how to use the GridifyFilterBuilder in your Blazor components:</MudText>
            <MudPaper Class="pa-3" Outlined="true">
                <pre style="margin: 0; overflow-x: auto;"><code>@(@"// Define filterable properties
var filterableProperties = new List<FilterableProperty>
{
    new(""FirstName"", ""First Name"", FilterPropertyType.String),
    new(""Salary"", ""Salary"", FilterPropertyType.Number),
    new(""HireDate"", ""Hire Date"", FilterPropertyType.Date),
    new(""IsActive"", ""Active"", FilterPropertyType.Boolean)
};

// Use the component
<GridifyFilterBuilder FilterableProperties=""@filterableProperties""
                      ShowGeneratedQuery=""true""
                      OnFilterChanged=""@OnFilterChanged"" />

// Handle filter changes
private async Task OnFilterChanged(string filterQuery)
{
    var query = _data.AsQueryable();
    var filtered = query.ApplyFiltering(filterQuery).ToList();
}")</code></pre>
            </MudPaper>
        </MudStack>
    </MudPaper>
</MudStack>

@code {
    private GridifyFilterBuilder? _filterBuilder;
    private List<FilterableProperty> _filterableProperties = new();
    private List<Employee> _allEmployees = new();
    private List<Employee> _filteredEmployees = new();
    private bool _loading = false;

    protected override void OnInitialized()
    {
        // Define filterable properties
        _filterableProperties = new List<FilterableProperty>
        {
            new("FirstName", "First Name", FilterPropertyType.String),
            new("LastName", "Last Name", FilterPropertyType.String),
            new("Email", "Email", FilterPropertyType.String),
            new("Department", "Department", FilterPropertyType.String),
            new("Salary", "Salary", FilterPropertyType.Number),
            new("Age", "Age", FilterPropertyType.Number),
            new("HireDate", "Hire Date", FilterPropertyType.Date),
            new("IsActive", "Active", FilterPropertyType.Boolean)
        };

        // Generate sample data
        _allEmployees = GenerateSampleEmployees();
        _filteredEmployees = new List<Employee>(_allEmployees);
    }

    private async Task OnFilterChanged(string filterQuery)
    {
        _loading = true;
        await Task.Delay(100); // Simulate processing

        if (string.IsNullOrWhiteSpace(filterQuery))
        {
            _filteredEmployees = new List<Employee>(_allEmployees);
        }
        else
        {
            // Apply Gridify filter
            var query = _allEmployees.AsQueryable();
            _filteredEmployees = query.ApplyFiltering(filterQuery).ToList();
        }

        _loading = false;
    }

    private void ApplyPreset(string presetName)
    {
        var conditions = new List<FilterCondition>();

        switch (presetName)
        {
            case "HighEarners":
                conditions.Add(new FilterCondition
                {
                    Property = _filterableProperties.First(p => p.PropertyName == "Salary"),
                    Operator = Selmir.MudGridify.Models.FilterOperator.GreaterThan,
                    Value = "100000"
                });
                break;

            case "RecentHires":
                var oneYearAgo = DateTime.Now.AddYears(-1);
                conditions.Add(new FilterCondition
                {
                    Property = _filterableProperties.First(p => p.PropertyName == "HireDate"),
                    Operator = Selmir.MudGridify.Models.FilterOperator.GreaterOrEqual,
                    Value = oneYearAgo.ToString("yyyy-MM-dd")
                });
                break;

            case "Engineering":
                conditions.Add(new FilterCondition
                {
                    Property = _filterableProperties.First(p => p.PropertyName == "Department"),
                    Operator = Selmir.MudGridify.Models.FilterOperator.Equals,
                    Value = "Engineering"
                });
                break;

            case "InactiveOld":
                // Demonstrates OR logic - Inactive OR Age > 60
                conditions.Add(new FilterCondition
                {
                    Property = _filterableProperties.First(p => p.PropertyName == "IsActive"),
                    Operator = Selmir.MudGridify.Models.FilterOperator.Equals,
                    Value = "false"
                });
                conditions.Add(new FilterCondition
                {
                    Property = _filterableProperties.First(p => p.PropertyName == "Age"),
                    Operator = Selmir.MudGridify.Models.FilterOperator.GreaterThan,
                    Value = "60"
                });
                // Set OR operator
                if (_filterBuilder != null)
                {
                    _filterBuilder.SetConditions(conditions);
                    // Manually trigger OR by using reflection or exposing a method
                    // For now, you'll need to manually toggle in the UI
                }
                break;

            case "Complex":
                // Complex: Engineering AND Salary > 80000 AND Active
                conditions.Add(new FilterCondition
                {
                    Property = _filterableProperties.First(p => p.PropertyName == "Department"),
                    Operator = Selmir.MudGridify.Models.FilterOperator.Equals,
                    Value = "Engineering"
                });
                conditions.Add(new FilterCondition
                {
                    Property = _filterableProperties.First(p => p.PropertyName == "Salary"),
                    Operator = Selmir.MudGridify.Models.FilterOperator.GreaterThan,
                    Value = "80000"
                });
                conditions.Add(new FilterCondition
                {
                    Property = _filterableProperties.First(p => p.PropertyName == "IsActive"),
                    Operator = Selmir.MudGridify.Models.FilterOperator.Equals,
                    Value = "true"
                });
                break;
        }

        _filterBuilder?.SetConditions(conditions);
    }

    private void ClearPreset()
    {
        _filterBuilder?.SetConditions(new List<FilterCondition>());
    }

    private string GetFilterPercentage()
    {
        if (_allEmployees.Count == 0) return "0";
        var percentage = (_filteredEmployees.Count * 100.0) / _allEmployees.Count;
        return percentage.ToString("F1");
    }

    private List<Employee> GenerateSampleEmployees()
    {
        var departments = new[] { "Engineering", "Sales", "Marketing", "HR", "Finance", "Operations" };
        var firstNames = new[] { "John", "Jane", "Michael", "Sarah", "David", "Emily", "Robert", "Lisa", "William", "Jennifer" };
        var lastNames = new[] { "Smith", "Johnson", "Williams", "Brown", "Jones", "Garcia", "Miller", "Davis", "Rodriguez", "Martinez" };

        var employees = new List<Employee>();
        var random = new Random(42);

        for (int i = 1; i <= 50; i++)
        {
            var firstName = firstNames[random.Next(firstNames.Length)];
            var lastName = lastNames[random.Next(lastNames.Length)];

            employees.Add(new Employee
            {
                Id = i,
                FirstName = firstName,
                LastName = lastName,
                Email = $"{firstName.ToLower()}.{lastName.ToLower()}@company.com",
                Department = departments[random.Next(departments.Length)],
                Salary = random.Next(40000, 150000),
                Age = random.Next(22, 65),
                HireDate = DateTime.Now.AddDays(-random.Next(30, 3650)),
                IsActive = random.Next(100) > 10
            });
        }

        return employees.OrderBy(e => e.LastName).ThenBy(e => e.FirstName).ToList();
    }
}
