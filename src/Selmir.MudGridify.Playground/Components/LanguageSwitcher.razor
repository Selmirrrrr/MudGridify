@using System.Globalization
@using Selmir.MudGridify.Playground.Services
@inject ICultureService CultureService

<MudMenu Icon="@Icons.Material.Filled.Language" Color="Color.Inherit" AnchorOrigin="Origin.BottomLeft">
    <MudMenuItem OnClick="@(() => SetCultureAsync("en"))">
        <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
            <MudText>ðŸ‡¬ðŸ‡§</MudText>
            <MudText>English</MudText>
            @if (_currentCulture == "en")
            {
                <MudIcon Icon="@Icons.Material.Filled.Check" Size="Size.Small" Color="Color.Success" />
            }
        </MudStack>
    </MudMenuItem>
    <MudMenuItem OnClick="@(() => SetCultureAsync("fr"))">
        <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
            <MudText>ðŸ‡«ðŸ‡·</MudText>
            <MudText>FranÃ§ais</MudText>
            @if (_currentCulture == "fr")
            {
                <MudIcon Icon="@Icons.Material.Filled.Check" Size="Size.Small" Color="Color.Success" />
            }
        </MudStack>
    </MudMenuItem>
    <MudMenuItem OnClick="@(() => SetCultureAsync("it"))">
        <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
            <MudText>ðŸ‡®ðŸ‡¹</MudText>
            <MudText>Italiano</MudText>
            @if (_currentCulture == "it")
            {
                <MudIcon Icon="@Icons.Material.Filled.Check" Size="Size.Small" Color="Color.Success" />
            }
        </MudStack>
    </MudMenuItem>
    <MudMenuItem OnClick="@(() => SetCultureAsync("de"))">
        <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
            <MudText>ðŸ‡©ðŸ‡ª</MudText>
            <MudText>Deutsch</MudText>
            @if (_currentCulture == "de")
            {
                <MudIcon Icon="@Icons.Material.Filled.Check" Size="Size.Small" Color="Color.Success" />
            }
        </MudStack>
    </MudMenuItem>
</MudMenu>

@code {
    private string _currentCulture = "en";

    protected override async Task OnInitializedAsync()
    {
        // Get the current culture from the browser's culture
        _currentCulture = CultureInfo.CurrentCulture.TwoLetterISOLanguageName;

        // Ensure we have a valid culture (fallback to English if not one of our supported cultures)
        if (_currentCulture != "en" && _currentCulture != "fr" && _currentCulture != "it" && _currentCulture != "de")
        {
            _currentCulture = "en";
        }
    }

    private async Task SetCultureAsync(string culture)
    {
        if (_currentCulture == culture)
            return;

        _currentCulture = culture;

        // This will save the culture to localStorage and reload the page
        await CultureService.SetCultureAsync(culture);
    }
}
